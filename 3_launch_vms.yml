---
- name: "Launch multiple VMs in parallel (Wrapper)"
  hosts: localhost
  gather_facts: no
  tasks:
    - name: "Launch ansible-playbook for each VM in the background"
      ansible.builtin.command: >-
        ansible-playbook create_one_vm.yml --inventory {{ item.hostip }}, --extra-vars '{"vm_info": {{ item | to_json }} }'
      args:
        chdir: "{{ playbook_dir }}"
      loop: "{{ vms_to_create }}"
      async: 1800
      poll: 0
      register: vm_launch_jobs

    - name: "Wait for all VM creation jobs to complete"
      ansible.builtin.async_status:
        jid: "{{ item.ansible_job_id }}"
      loop: "{{ vm_launch_jobs.results }}"
      register: vm_final_status
      until: item.finished
      retries: 60
      delay: 30
      loop_control:
        label: "{{ item.item.name }}"

    # ======================================================================
    # NEW: Aggregate results after all parallel jobs are done
    # ======================================================================
    - name: "Process and aggregate all job results"
      ansible.builtin.set_fact:
        all_results: "{{ vm_final_status.results | map(attribute='ansible_facts.create_vm_result') | list }}"

    - name: "Create lists of successful and failed VMs"
      ansible.builtin.set_fact:
        successful_vms: "{{ all_results | selectattr('status', 'equalto', 'success') | list }}"
        failed_vms: "{{ all_results | selectattr('status', 'equalto', 'failed') | list }}"

    - name: "✅ Final Report: Successful VMs"
      ansible.builtin.debug:
        msg: "SUCCESS ({{ successful_vms | length }}): {{ successful_vms | map(attribute='name') | list }}"
      when: successful_vms | length > 0

    - name: "❌ Final Report: Failed VMs"
      ansible.builtin.debug:
        var: failed_vms
      when: failed_vms | length > 0
