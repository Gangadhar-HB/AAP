---
- name: Launch multiple VMs in parallel
  hosts: all
  gather_facts: no
  strategy: free     # allow independent parallel tasks per host
  vars:
    async_jobs: []
    successful_vms: []
    failed_vms: []

  tasks:

    # 1️⃣ Start all VMs asynchronously (non-blocking)
    - name: Launch all VMs asynchronously
      ansible.builtin.include_tasks: launch_vm_task.yml
      loop: "{{ vms_to_create | from_yaml }}"
      loop_control:
        loop_var: vm_item

    # 2️⃣ Wait for async jobs to finish
    - name: Wait for all VM launch jobs to complete
      ansible.builtin.async_status:
        jid: "{{ item.job_id }}"
      delegate_to: "{{ item.host }}"
      register: vm_results
      until: vm_results.finished
      retries: 100
      delay: 30
      loop: "{{ async_jobs }}"
      loop_control:
        label: "{{ item.vm.name }}"
      ignore_errors: true

    # 3️⃣ Process each job result and extract IP address
    - name: Process VM results
      ansible.builtin.set_fact:
        successful_vms: >-
          {{
            successful_vms +
            [{
              'name': item.vm.name,
              'ip_address': (
                item.vm.networkInterface
                | selectattr('gw', 'defined')
                | map(attribute='ipaddress')
                | map('split', '/')
                | map('first')
                | first
              )
            }]
            if (item.rc is defined and item.rc == 0) else successful_vms
          }}
        failed_vms: "{{ failed_vms + [item.vm.name] if (item.rc is defined and item.rc != 0) else failed_vms }}"
      loop: "{{ vm_results.results | default([]) }}"
      when: item.ansible_job_id is defined

    # 4️⃣ Display final summary
    - name: Final report
      ansible.builtin.debug:
        msg:
          - "✅ Successful VMs (Name & IP): {{ successful_vms }}"
          - "❌ Failed VMs: {{ failed_vms }}"

    # 5️⃣ Export workflow stats for AAP chaining
    - name: Set workflow facts for next job
      ansible.builtin.set_stats:
        data:
          launched_vms: "{{ successful_vms }}"

    # 6️⃣ Save successful VM info to file
    - name: Save successful VMs
      copy:
        content: "{{ successful_vms | to_json }}"
        dest: "/tmp/successful_vms.json"

