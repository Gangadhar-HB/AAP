---
# Play 1: Load successful VMs and create dynamic inventory
- hosts: all
  gather_facts: no
  vars:
    failed_vms: []
  tasks:

    - name: Load successful VMs from JSON file
      slurp:
        src: "/tmp/successful_vms.json"
      register: successful_vms_file

    - name: Set successful_vms fact
      set_fact:
        successful_vms: "{{ successful_vms_file.content | b64decode | from_json }}"

    - name: Ensure we have successful VMs
      assert:
        that:
          - successful_vms | length > 0
        fail_msg: "No successful VMs found. Nothing to post-configure."
        success_msg: "Found {{ successful_vms | length }} VMs to post-configure."

    - name: Add each VM IP to dynamic inventory group
      add_host:
        name: "{{ item.ip_address }}"
        groups: new_vms
      loop: "{{ successful_vms }}"

# Play 2: Run Post VM Configuration on all new VMs
- hosts: new_vms
  gather_facts: no
  tasks:

    - name: Wait for SSH to become available
      wait_for_connection:
        delay: 10
        timeout: 300

    - name: Remove old SSH key from known_hosts
      delegate_to: localhost
      shell: ssh-keygen -R {{ inventory_hostname }}
      ignore_errors: true

    - name: Add new SSH key to known_hosts
      delegate_to: localhost
      shell: ssh-keyscan -H {{ inventory_hostname }} >> ~/.ssh/known_hosts
      ignore_errors: true

    - name: Run PostVMLaunch tasks asynchronously
      import_tasks: files/PostVMLaunch.yml
      async: 1800
      poll: 0
      register: postvm_job
      ignore_errors: true

    - name: Wait for PostVMLaunch tasks to complete
      async_status:
        jid: "{{ postvm_job.ansible_job_id }}"
      register: postvm_result
      until: postvm_result.finished
      retries: 60
      delay: 30
      ignore_errors: true

    - name: Check for ERRORs in logs
      shell: sudo grep -iE "ERROR" /root/logs/vm_config_thin_vol.sh/* || true
      register: vm_log_check
      failed_when: false

    - name: Fail VM if errors found
      fail:
        msg: "Found ERROR(s) on VM {{ inventory_hostname }}:\n{{ vm_log_check.stdout }}"
      when: vm_log_check.stdout != ""

# Play 3: Summary
- hosts: localhost
  gather_facts: no
  tasks:
    - name: Final report
      debug:
        msg:
          - "✅ Successful VMs: {{ successful_vms }}"
          - "❌ Failed VMs: {{ failed_vms }}"

