- block:
    - name: Include network details
      include_tasks: files/get_networkInfo.yml

    - name: Create directory for VM config
      file:
         path: "/usr/local/etc/vm_configs/{{ vm_name }}"
         state: directory
         owner: root
         group: root
         mode: '0755'
      become: true


    - name: Get the partition size from input
      set_fact:
          couchdata: "{{ item.vm_partition.couchdata_size | default(omit) }}"
          couchindex: "{{ item.vm_partition.couchindex_size | default(omit) }}"
          DGdata: "{{ item.vm_partition.DGdata_size | default(omit) }}"
          DGlogs: "{{ item.vm_partition.DGlogs_size | default(omit) }}"
          Database: "{{ item.vm_partition.Database_size | default(omit) }}"
          GridGainData: "{{ item.vm_partition.GridGainData_size | default(omit) }}"
          GridGainDrFs: "{{ item.vm_partition.GridGainDrFs_size | default(omit) }}"
          GridGainWal: "{{ item.vm_partition.GridGainWal_size | default(omit) }}"
          PostgresData: "{{ item.vm_partition.PostgresData_size | default(omit) }}"
          PostgresWal: "{{ item.vm_partition.PostgresWal_size | default(omit) }}"
          Recordings: "{{ item.vm_partition.Recordings_size | default(omit) }}"

    - block:
      - name: create On-prem network file
        template:
          src: "roles/create_cfg/templates/network_config.ini.j2"
          dest: "/tmp/network_{{ vm_name }}.ini"
        become: true
        become_user: root

      - name: Get the content of On-prem cfg file
        shell: "cat /tmp/network_{{ item.name }}.ini"
        become: true
        become_user: root
        register: user_data_action_1_onprem

      - set_fact:
         user_data_action_1: "{{ user_data_action_1_onprem }}"

      when: effective_setup == "0"


    - name: Generate thin pool configuration files
      template:
        src: "{{ item.vm_type }}_thin_pool_volume.cfg.j2"
        dest: "/usr/local/etc/vm_configs/{{ vm_name }}/{{ item.vm_type }}_thin_pool_volume.cfg"
      become: true
      become_user: root
    - name: Generate thin pool configuration files
      template:
        src: "{{ item.vm_type }}_thin_pool_volume.cfg.j2"
        dest: "/usr/local/etc/{{ item.vm_type }}_thin_pool_volume.cfg"
      become: true
      become_user: root

    - name: Get the content of cfg file
      shell: "cat /usr/local/etc/{{ item.vm_type }}_thin_pool_volume.cfg"
      become: true
      become_user: root
      register: user_data_action


    - name: Create directory for ISO
      file:
         path: "/cloudinitiso/{{ vm_name }}"
         state: directory
         owner: root
         group: root
         mode: '0755'
      become: true

    - name: generate cloudinit file for {{ item.vm_type }}
      template:
          src: "{{ file }}.j2"
          dest: "/cloudinitiso/{{ vm_name }}/{{ file }}"
      become: true
      become_user: root
      loop:
        - user-data
        - meta-data
      loop_control:
        loop_var: file

    - name: Run the VM tmos confg-2 iso
      shell: "cd /cloudinitiso/{{ vm_name }} ; genisoimage -output {{ vm_name }}_ciiso.iso -volid cidata -joliet -rock user-data meta-data"
      become: true
      become_user: root





- block:
    - name: Include network details
      include_tasks: files/get_networkInfo.yml

    - name: Create directory for VM config
      ansible.builtin.file:
        path: "/usr/local/etc/vm_configs/{{ vm_name }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Get the partition size from input
      ansible.builtin.set_fact:
        couchdata: "{{ item.vm_partition.couchdata_size | default(omit) }}"
        couchindex: "{{ item.vm_partition.couchindex_size | default(omit) }}"
        DGdata: "{{ item.vm_partition.DGdata_size | default(omit) }}"
        DGlogs: "{{ item.vm_partition.DGlogs_size | default(omit) }}"
        Database: "{{ item.vm_partition.Database_size | default(omit) }}"
        GridGainData: "{{ item.vm_partition.GridGainData_size | default(omit) }}"
        GridGainDrFs: "{{ item.vm_partition.GridGainDrFs_size | default(omit) }}"
        GridGainWal: "{{ item.vm_partition.GridGainWal_size | default(omit) }}"
        PostgresData: "{{ item.vm_partition.PostgresData_size | default(omit) }}"
        PostgresWal: "{{ item.vm_partition.PostgresWal_size | default(omit) }}"
        Recordings: "{{ item.vm_partition.Recordings_size | default(omit) }}"

    - block:
        - name: Create On-prem network file
          ansible.builtin.template:
            src: "roles/create_cfg/templates/network_config.ini.j2"
            dest: "/tmp/network_{{ vm_name }}.ini"
    
        - name: Get the content of On-prem cfg file
          ansible.builtin.slurp:
            src: "/tmp/network_{{ vm_name }}.ini"
          register: user_data_action_1_onprem
    
        - name: Set fact for network file content
          ansible.builtin.set_fact:
            user_data_action_1: "{{ user_data_action_1_onprem.content | b64decode }}"
      when: effective_setup == "0"
    
    - name: Generate thin pool configuration files
      ansible.builtin.template:
        src: "{{ item.vm_type }}_thin_pool_volume.cfg.j2"
        dest: "/usr/local/etc/vm_configs/{{ vm_name }}/{{ item.vm_type }}_thin_pool_volume.cfg"
      loop: "{{ vm_config_items }}"
      loop_control:
        loop_var: item
    
    - name: Create directory for ISO
      ansible.builtin.file:
        path: "/cloudinitiso/{{ vm_name }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
    
    - name: Generate cloud-init files
      ansible.builtin.template:
        src: "{{ file }}.j2"
        dest: "/cloudinitiso/{{ vm_name }}/{{ file }}"
      loop:
        - user-data
        - meta-data
      loop_control:
        loop_var: file
    
    - name: Generate ISO for cloud-init
      community.general.iso_image:
        iso_path: "/cloudinitiso/{{ vm_name }}/{{ vm_name }}_ciiso.iso"
        files:
          - "/cloudinitiso/{{ vm_name }}/user-data"
          - "/cloudinitiso/{{ vm_name }}/meta-data"
        volume_id: cidata
        joliet: true
        rock_ridge: true
