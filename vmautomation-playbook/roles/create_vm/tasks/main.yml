---
# tasks file for create_vm

- block:
    
    - name: Launching "{{ vm_name }}"  vm
      shell: "sudo bash -x /usr/local/bin/vm_build_and_install.sh -d 4 -v  RESTORE {{ vm_name }} "
      register: vm_creation_result
      ignore_errors: true
    
    - block:

        - name: Append VM to Failed list
          set_fact:
            failed_vms: "{{ failed_vms | default([]) + [vm_name] }}"
        
        - name: "delete the lvm partition for the failed VM if created"
          shell: "sudo lvremove /dev/{{ vg_name }}/{{ vm_name }}_part /dev/{{ vg_name }}/{{ vm_name }}_vol -y"
          ignore_errors: true
 
      when: vm_creation_result is not succeeded or ( vm_creation_result.stdout | regex_search('virt-install command returned error') )
    
    - block: 
        - name: Append VM to successful list
          set_fact:
            successful_vms: "{{ successful_vms | default([]) + [vm_name] }}"


        - name: check the state of vm that are launched 
          shell: sudo virsh -c qemu:///system dominfo {{ vm_name }} | grep "State" | awk '{ print $2 }'
          register: vm_check
          until: vm_check.stdout.find("running") != -1
          retries: 20
          delay: 30
          ignore_errors: true

        - name: Create a dictionary with vm state
          set_fact:
            vm_state: "{{ vm_state | default({}) | combine( { vm_name : vm_check.stdout }) }}"
        
        - debug:
            msg:
            - "Successfully launched VMs: {{ successful_vms }}" 
            - "{{ vm_state }}"
      when: vm_creation_result is succeeded and ( vm_creation_result.stdout | regex_search('Domain creation completed') )

- name: List of failed VMs
  debug:
    msg: "Failed VMs lsit: {{failed_vms | default([]) }}"
#
#
#
#when: item.vm_type != "F5"

# - name: creating thick partition for {{ item.vm_type }}
#   shell: "sudo /usr/sbin/lvcreate -W y -L {{ vm_disk_size }}G -n {{ vm_name }}_part vg01"

#  - name: convert qcow2 image to disk partition
#   shell: "/usr/bin/qemu-img convert -p '/usr/local/lib/Prebuilt_kodiak/BIGIP-15.1.10.4-0.0.5.qcow2' -O raw '{{ vm_name}}_part'"

#- debug:
#    msg: "VM => {{ vm_name }} is launched successfully in BM => {{ item.hostip }}"
#- debug:
#    msg: "{{ vmlaunch_result }}"
#- name: create think partition for "{{ vm_name }}"
#  shell:

#- name: convert raw image to thick_partition
#  shell: "/usr/bin/qemu-img convert -p '/usr/local/lib/Prebuilt_kodiak/vm_12_3_0_D1_bm_host_image_D11-2022-08-08.qcow2' -O raw '{{ vm_name}}_part'"
#  delegate_to: "{{ item.host }}"

#- name: Launching "{{ vm_name }}"  vm
#  shell: "sudo /usr/bin/virt-install --name={{ vm_name }} --os-type=linux --os-variant=rhel7 --clock offset='utc'  --ram={{ vm_ram }} --vcpus={{ vm_cpu }},maxvcpus={{ vm_cpu }},cpuset='auto' --controller type=scsi,model=virtio-scsi --disk path='/dev/vg01/{{ vm_name }}_part',boot_order=1,bus=scsi,discard=unmap --disk path='/dev/vg01/{{ vm_name }}_vol',bus=scsi,discard=unmap --network model=virtio,bridge='virbr0',mac='7a:86:e5:e4:cb:ff' --network model=virtio,bridge='oambr-ext',mac='7a:86:e5:a2:b4:77' --network model=virtio,bridge='dpbr_581',mac='7a:86:e5:03:a6:9e' --network model=virtio,bridge='dpbr_700',mac='4e:df:a8:05:40:d0' --network model=virtio,bridge='dpbr_701',mac='4e:df:a8:bb:02:d8' --noautoconsole --import --autostart --debug"
#delegate_to: "{{ item.host }}"

#  when: "vm_name not in vm_present.stdout"

#- block:

 #   - name: VM's alredy present in Baremetel
 #     set_fact:
 #       already_present: "{{ already_present | default([]) + [vm_name] }}"
 #   - debug:
 #       msg: "Already Present in Baremetel --> {{ already_present }}"
 # when: vm_name in vm_present.stdout

