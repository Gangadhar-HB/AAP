---
- block:
    # Phase 1: Sequential - Network setup (must run first)
    - name: Include network details
      include_tasks: files/get_networkInfo.yml

    # Phase 2: Parallel - Independent setup tasks
    - name: Create directory for VM config (async)
      file:
         path: "/usr/local/etc/vm_configs/{{ vm_name }}"
         state: directory
         owner: root
         group: root
         mode: '0755'
      become: true
      async: 30
      poll: 0
      register: create_vm_config_dir

    - name: Get the partition size from input (async)
      set_fact:
          couchdata: "{{ item.vm_partition.couchdata_size | default(omit) }}"
          couchindex: "{{ item.vm_partition.couchindex_size | default(omit) }}"
          DGdata: "{{ item.vm_partition.DGdata_size | default(omit) }}"
          DGlogs: "{{ item.vm_partition.DGlogs_size | default(omit) }}"
          Database: "{{ item.vm_partition.Database_size | default(omit) }}"
          GridGainData: "{{ item.vm_partition.GridGainData_size | default(omit) }}"
          GridGainDrFs: "{{ item.vm_partition.GridGainDrFs_size | default(omit) }}"
          GridGainWal: "{{ item.vm_partition.GridGainWal_size | default(omit) }}"
          PostgresData: "{{ item.vm_partition.PostgresData_size | default(omit) }}"
          PostgresWal: "{{ item.vm_partition.PostgresWal_size | default(omit) }}"
          Recordings: "{{ item.vm_partition.Recordings_size | default(omit) }}"
      async: 10
      poll: 0
      register: get_partition_sizes

    - name: Create directory for ISO (async)
      file:
         path: "/cloudinitiso/{{ vm_name }}"
         state: directory
         owner: root
         group: root
         mode: '0755'
      become: true
      async: 30
      poll: 0
      register: create_iso_dir

    # Wait for Phase 2 parallel tasks to complete
    - name: Wait for VM config directory creation
      async_status:
        jid: "{{ create_vm_config_dir.ansible_job_id }}"
      register: create_vm_config_dir_result
      until: create_vm_config_dir_result.finished
      retries: 30
      delay: 1

    - name: Wait for partition size processing
      async_status:
        jid: "{{ get_partition_sizes.ansible_job_id }}"
      register: get_partition_sizes_result
      until: get_partition_sizes_result.finished
      retries: 10
      delay: 1

    - name: Wait for ISO directory creation
      async_status:
        jid: "{{ create_iso_dir.ansible_job_id }}"
      register: create_iso_dir_result
      until: create_iso_dir_result.finished
      retries: 30
      delay: 1

    - block:
      - name: create On-prem network file
        template:
          src: "roles/create_cfg/templates/network_config.ini.j2"
          dest: "/tmp/network_{{ vm_name }}.ini"
        become: true
        become_user: root

      - name: Get the content of On-prem cfg file
        shell: "cat /tmp/network_{{ item.name }}.ini"
        become: true
        become_user: root
        register: user_data_action_1_onprem

      - set_fact:
         user_data_action_1: "{{ user_data_action_1_onprem }}"

      when: effective_setup == "0"

    - block:
      - name: create wavelite network file
        template:
          src: "roles/create_cfg/templates/wavelite_network_config.ini.j2"
          dest: "/tmp/wavelite_network_{{ vm_name }}.ini"
        become: true
        become_user: root

      - name: Get the content of wavelite cfg file
        shell: "cat /tmp/wavelite_network_{{ item.name }}.ini"
        become: true
        become_user: root
        register: user_data_action_1_wavelite

      - set_fact:
         user_data_action_1: "{{ user_data_action_1_wavelite }}"

      when: effective_setup == "1"

    #- name: Get the content of network file
    #  set_fact:
    #    user_data_action_1: "{{ lookup('file', '/tmp/network_' + vm_name  + '.ini') }}"
    #  become: true
    #  become_user: root


    - name: Generate thin pool configuration files
      template:
        src: "{{ item.vm_type }}_thin_pool_volume.cfg.j2"
        dest: "/usr/local/etc/vm_configs/{{ vm_name }}/{{ item.vm_type }}_thin_pool_volume.cfg"
      become: true
      become_user: root
    - name: Generate thin pool configuration files
      template:
        src: "{{ item.vm_type }}_thin_pool_volume.cfg.j2"
        dest: "/usr/local/etc/{{ item.vm_type }}_thin_pool_volume.cfg"
      become: true
      become_user: root

    - name: Get the content of cfg file
      shell: "cat /usr/local/etc/{{ item.vm_type }}_thin_pool_volume.cfg"
      become: true
      become_user: root
      register: user_data_action

    #- name: Get the content of cfg file
    #  set_fact:
    #    user_data_action: "{{ lookup('file', '/usr/local/etc/' + item.vm_type + '_thin_pool_volume.cfg') }}"
    #  become: true
    #  become_user: root


    - name: Create directory for ISO
      file:
         path: "/cloudinitiso/{{ vm_name }}"
         state: directory
         owner: root
         group: root
         mode: '0755'
      become: true

    - name: generate cloudinit file for {{ item.vm_type }}
      template:
          src: "{{ file }}.j2"
          dest: "/cloudinitiso/{{ vm_name }}/{{ file }}"
      become: true
      become_user: root
      loop:
        - user-data
        - meta-data
      loop_control:
        loop_var: file

    - name: Run the VM tmos confg-2 iso
      shell: "cd /cloudinitiso/{{ vm_name }} ; genisoimage -output {{ vm_name }}_ciiso.iso -volid cidata -joliet -rock user-data meta-data"
      become: true
      become_user: root

