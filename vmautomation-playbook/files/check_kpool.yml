---
- name: check the thin pool is present or not
  shell: "sudo lvs -a -o +devices | grep -w  ' kpool' | awk '{print $1 }'"
  register: hasKpool

- block:
   - name: get the thinpool unit
     shell: "sudo lvs -a -o +devices | grep -w '  kpool' | awk '{ print substr($4, length($4)) }'"
     register: kpoolsize_unit

   - name: check the thin pool size
     shell: "sudo lvs -a -o +devices | grep -w '  kpool' | awk '{ print $4 }' | tr -cd '[:alnum:].\n' | awk '{ print int($1*1024) }'"
     register: kpoolsize_tb
     when: kpoolsize_unit.stdout == "t"

   - name: check the thin pool size
     shell: "sudo lvs -a -o +devices | grep -w '  kpool' | awk '{ print int($4)}'"
     register: kpoolsize_gb
     when: kpoolsize_unit.stdout == "g"


   - set_fact:
      thinPoolsize:  "{{ kpoolsize_tb.stdout }}"
     when: kpoolsize_unit.stdout == "t"

   - set_fact:
      thinPoolsize:  "{{ kpoolsize_gb.stdout }}"
     when: kpoolsize_unit.stdout == "g"


  when: hasKpool.stdout != ''

- block:
   - name: get the free space
     shell: "sudo /usr/sbin/vgdisplay -c {{ vg_name | default('vg01') }}  | cut -d':' -f16 | awk '{ print $1 * 4096}' | awk '{print $1/1024/1024}'"
     register: freespace


   - name: "calculate the 80 percent of free space"
     shell: "sudo /usr/sbin/vgdisplay -c {{ vg_name | default('vg01') }} | cut -d':' -f16 | awk '{print int(($1*4096/1024/1024)*{{ thinpool_BM | default(80) }}/100)}'"
     register: new_thinpoolsize



   - name: check the free space and create thin pool if not created
     shell: "/usr/local/bin/manage_kodiak_thin_pool.sh -s {{ new_thinpoolsize.stdout }}  -v {{ vg_name | default('vg01') }} POOL kpool"
     when: hasKpool.stdout == '' and ( new_thinpoolsize.stdout | int ) < ( freespace.stdout | int )
     become: true
     become_user: root
     failed_when: ( new_thinpoolsize.stdout | int ) > ( freespace.stdout | int )

   - set_fact:
      thinPoolsize: "{{ new_thinpoolsize.stdout }}"

  when: hasKpool.stdout == ''

#- name: Execute role
#  include_tasks: files/execute_roles.yml
#  args:
#    apply:
#      delegate_to: "{{ item.hostip }}"
#      run_once: true
#  with_items: "{{ vms }}"
#  loop_control:
#    loop_var: item
