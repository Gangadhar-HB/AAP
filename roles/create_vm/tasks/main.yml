---
# ======================================================================
# Role: create_vm (Stateless & Idempotent)
# Purpose: Launch a single VM and return its status.
# It does NOT modify shared variables to avoid race conditions.
# ======================================================================

- name: "Task block for creating VM {{ vm_name }}"
  block:
    # ----------------------------------------------------------
    # 1️⃣ Attempt to launch the VM
    # ----------------------------------------------------------
    - name: "Executing vm_build_and_install.sh for {{ vm_name }}"
      ansible.builtin.shell:
        cmd: >
          sudo bash -x /usr/local/bin/vm_build_and_install.sh
          -d 4 -v RESTORE {{ vm_name }}
      register: vm_creation_result
      changed_when: true
      failed_when: >
        vm_creation_result.rc != 0 or
        'virt-install command returned error' in vm_creation_result.stdout

    # ----------------------------------------------------------
    # 2️⃣ On Success: Wait for VM to be 'running'
    # ----------------------------------------------------------
    - name: "Wait for VM {{ vm_name }} to enter 'running' state"
      ansible.builtin.command: "sudo virsh -c qemu:///system dominfo {{ vm_name }}"
      register: vm_check
      until: "'State:           running' in vm_check.stdout"
      retries: 20
      delay: 30
      changed_when: false

    # ----------------------------------------------------------
    # 3️⃣ On Success: Set the final result object for this VM
    # ----------------------------------------------------------
    - name: "Set success result for {{ vm_name }}"
      ansible.builtin.set_fact:
        create_vm_result:
          name: "{{ vm_name }}"
          status: "success"
          state: "running"
          host: "{{ vm_info.hostip }}"

  rescue:
    # ----------------------------------------------------------
    # 4️⃣ On Failure: This block runs if any task above fails
    # ----------------------------------------------------------
    - name: "Cleanup LVM partitions for failed VM {{ vm_name }}"
      ansible.builtin.shell:
        cmd: >
          sudo lvremove /dev/{{ vg_name }}/{{ vm_name }}_part
          /dev/{{ vg_name }}/{{ vm_name }}_vol -y
      ignore_errors: true
      changed_when: false

    # ----------------------------------------------------------
    # 5️⃣ On Failure: Set the final result object for this VM
    # ----------------------------------------------------------
    - name: "Set failure result for {{ vm_name }}"
      ansible.builtin.set_fact:
        create_vm_result:
          name: "{{ vm_name }}"
          status: "failed"
          return_code: "{{ vm_creation_result.rc | default('N/A') }}"
          stderr: "{{ vm_creation_result.stderr | default('N/A') }}"
          host: "{{ vm_info.hostip }}"
