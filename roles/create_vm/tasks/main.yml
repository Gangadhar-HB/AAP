---
# ======================================================================
# Role: create_vm
# Purpose: Launch multiple VMs in parallel, handle cleanup on failure,
#          and track success/failure asynchronously.
# ======================================================================

# ----------------------------------------------------------
# 1️⃣ Launch VM asynchronously
# ----------------------------------------------------------
- name: "Launch VM {{ vm_name }} asynchronously"
  ansible.builtin.shell: >
    sudo bash -x /usr/local/bin/vm_build_and_install.sh -d 4 -v RESTORE {{ vm_name }}
  register: vm_creation_result
  async: 3600
  poll: 0
  ignore_errors: true
  become: true

# ----------------------------------------------------------
# 2️⃣ Record the async job
# ----------------------------------------------------------
- name: "Store async job ID and VM info"
  ansible.builtin.set_fact:
    launched_vms: "{{ launched_vms | default([]) + [{'name': vm_name, 'hostip': vm_hostip, 'job_id': vm_creation_result.ansible_job_id}] }}"

# ----------------------------------------------------------
# 3️⃣ Wait for async VM job completion and handle success/failure
#    (This block is typically run in a separate play for all VMs)
# ----------------------------------------------------------
- name: "Wait for VM job to complete and process result"
  ansible.builtin.async_status:
    jid: "{{ item.job_id }}"
  register: job_result
  until: job_result.finished
  retries: 60
  delay: 30
  failed_when: job_result.rc != 0
  loop: "{{ launched_vms }}"
  loop_control:
    loop_var: item
  delegate_to: "{{ item.hostip }}"

# ----------------------------------------------------------
# 4️⃣ Process VM result: success or failure
# ----------------------------------------------------------
- name: "Append VM to success or failure list"
  block:
    - name: "VM succeeded: add to successful_vms"
      ansible.builtin.set_fact:
        successful_vms: "{{ successful_vms | default([]) + [item.name] }}"

    - name: "Check VM state via virsh"
      ansible.builtin.shell: >
        sudo virsh -c qemu:///system dominfo {{ item.name }} |
        grep "State" | awk '{ print $2 }'
      register: vm_check
      until: vm_check.stdout.find("running") != -1
      retries: 20
      delay: 30
      ignore_errors: true

    - name: "Store VM state in dictionary"
      ansible.builtin.set_fact:
        vm_state: "{{ vm_state | default({}) | combine({ item.name: vm_check.stdout | default('unknown') }) }}"

  rescue:
    - name: "VM failed: add to failed_vms"
      ansible.builtin.set_fact:
        failed_vms: "{{ failed_vms | default([]) + [item.name] }}"

    - name: "Cleanup LVM partitions for failed VM (if any)"
      ansible.builtin.shell: >
        sudo lvremove /dev/{{ vg_name }}/{{ item.name }}_part
        /dev/{{ vg_name }}/{{ item.name }}_vol -y
      ignore_errors: true

  loop: "{{ launched_vms }}"
  loop_control:
    loop_var: item

# ----------------------------------------------------------
# 5️⃣ Debug summary
# ----------------------------------------------------------
- name: "List of successfully launched VMs"
  ansible.builtin.debug:
    msg: "✅ Successful VMs: {{ successful_vms | default([]) }}"

- name: "List of failed VMs"
  ansible.builtin.debug:
    msg: "❌ Failed VMs: {{ failed_vms | default([]) }}"

- name: "VM states"
  ansible.builtin.debug:
    msg: "{{ vm_state | default({}) }}"

