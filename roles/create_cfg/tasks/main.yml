---
- block:

    # --- NETWORK CONFIGURATION ---
    - name: Include network details
      ansible.builtin.include_tasks:
        file: files/get_networkInfo.yml

    - name: Create directory for VM config
      ansible.builtin.file:
        path: "/usr/local/etc/vm_configs/{{ vm_name }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      become: true

    # --- PARTITION SIZES ---
    - name: Set partition size facts
      ansible.builtin.set_fact:
        couchdata: "{{ item.vm_partition.couchdata_size | default(omit) }}"
        couchindex: "{{ item.vm_partition.couchindex_size | default(omit) }}"
        DGdata: "{{ item.vm_partition.DGdata_size | default(omit) }}"
        DGlogs: "{{ item.vm_partition.DGlogs_size | default(omit) }}"
        Database: "{{ item.vm_partition.Database_size | default(omit) }}"
        GridGainData: "{{ item.vm_partition.GridGainData_size | default(omit) }}"
        GridGainDrFs: "{{ item.vm_partition.GridGainDrFs_size | default(omit) }}"
        GridGainWal: "{{ item.vm_partition.GridGainWal_size | default(omit) }}"
        PostgresData: "{{ item.vm_partition.PostgresData_size | default(omit) }}"
        PostgresWal: "{{ item.vm_partition.PostgresWal_size | default(omit) }}"
        Recordings: "{{ item.vm_partition.Recordings_size | default(omit) }}"
      when: item.vm_partition is defined and item.vm_partition | length > 0

    # --- VM INFO FACT ---
    - name: Set vm_info fact for cloud-init template
      ansible.builtin.set_fact:
        vm_info:
          name: "{{ vm_name }}"
          type: "{{ item.vm_type }}"
          ip: "{{ item.networkInterface[0].ipaddress | ipaddr('address') }}"
          hostname: "{{ vm_name }}"
          timezone: "{{ timezone | default('UTC') }}"

    # --- NETWORK CONFIGURATION FILES ---
    - block:
        - name: Generate On-Prem network config
          ansible.builtin.template:
            src: network_config.ini.j2
            dest: "/tmp/network_{{ vm_name }}.ini"
          become: true

        - name: Read On-Prem network config content
          ansible.builtin.slurp:
            src: "/tmp/network_{{ vm_name }}.ini"
          become: true
          register: network_content_onprem

        - name: Set network fact for On-Prem
          ansible.builtin.set_fact:
            user_data_action_1: "{{ network_content_onprem.content | b64decode }}"
      when: effective_setup == "0"

    - block:
        - name: Generate Wavelite network config
          ansible.builtin.template:
            src: wavelite_network_config.ini.j2
            dest: "/tmp/wavelite_network_{{ vm_name }}.ini"
          become: true

        - name: Read Wavelite network config content
          ansible.builtin.slurp:
            src: "/tmp/wavelite_network_{{ vm_name }}.ini"
          become: true
          register: network_content_wavelite

        - name: Set network fact for Wavelite
          ansible.builtin.set_fact:
            user_data_action_1: "{{ network_content_wavelite.content | b64decode }}"
      when: effective_setup == "1"

    # --- THIN POOL CONFIGURATION ---
    - name: Generate thin pool configuration files
      ansible.builtin.template:
        src: "{{ item.vm_type }}_thin_pool_volume.cfg.j2"
        dest: "/usr/local/etc/vm_configs/{{ vm_name }}/{{ item.vm_type }}_thin_pool_volume.cfg"
      become: true

    - name: Generate secondary thin pool config path
      ansible.builtin.template:
        src: "{{ item.vm_type }}_thin_pool_volume.cfg.j2"
        dest: "/usr/local/etc/{{ item.vm_type }}_thin_pool_volume.cfg"
      become: true

    - name: Read thin pool config content
      ansible.builtin.slurp:
        src: "/usr/local/etc/{{ item.vm_type }}_thin_pool_volume.cfg"
      become: true
      register: thin_pool_content

    - name: Set thin pool fact
      ansible.builtin.set_fact:
        user_data_action: "{{ thin_pool_content.content | b64decode }}"

    # --- CLOUD-INIT ISO ---
    - name: Create cloud-init ISO directory
      ansible.builtin.file:
        path: "/cloudinitiso/{{ vm_name }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      become: true

    - name: Generate cloud-init user-data and meta-data
      ansible.builtin.template:
        src: "{{ file }}.j2"
        dest: "/cloudinitiso/{{ vm_name }}/{{ file }}"
        vars:
          vm_info: "{{ vm_info }}"
      become: true
      loop:
        - user-data
        - meta-data
      loop_control:
        loop_var: file

    - name: Create cloud-init ISO image
      ansible.builtin.command:
        cmd: "genisoimage -output {{ vm_name }}_ciiso.iso -volid cidata -joliet -rock user-data meta-data"
        chdir: "/cloudinitiso/{{ vm_name }}"
      become: true

