---
# tasks file for create_cfg role
# Generates configuration files and cloud-init ISO for a single VM

- block:
    - name: "Debug VM info"
      ansible.builtin.debug:
        var: item
      when: item is defined

    # ------------------------
    # Ensure VM config directory exists
    # ------------------------
    - name: Create directory for VM config
      ansible.builtin.file:
        path: "/usr/local/etc/vm_configs/{{ vm_name }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      become: true

    # ------------------------
    # Set partition sizes if available
    # ------------------------
    - name: Set partition size facts for templates
      ansible.builtin.set_fact:
        couchdata: "{{ item.vm_partition.couchdata_size | default(omit) }}"
        couchindex: "{{ item.vm_partition.couchindex_size | default(omit) }}"
        DGdata: "{{ item.vm_partition.DGdata_size | default(omit) }}"
        DGlogs: "{{ item.vm_partition.DGlogs_size | default(omit) }}"
        Database: "{{ item.vm_partition.Database_size | default(omit) }}"
        GridGainData: "{{ item.vm_partition.GridGainData_size | default(omit) }}"
        GridGainDrFs: "{{ item.vm_partition.GridGainDrFs_size | default(omit) }}"
        GridGainWal: "{{ item.vm_partition.GridGainWal_size | default(omit) }}"
        PostgresData: "{{ item.vm_partition.PostgresData_size | default(omit) }}"
        PostgresWal: "{{ item.vm_partition.PostgresWal_size | default(omit) }}"
        Recordings: "{{ item.vm_partition.Recordings_size | default(omit) }}"
      when: item.vm_partition is defined and item.vm_partition | length > 0

    # ------------------------
    # Generate network config
    # ------------------------
    - name: Ensure network bridge directory exists
      ansible.builtin.file:
        path: "/tmp"
        state: directory
      become: true

    - name: Create network config template
      ansible.builtin.template:
        src: >
          {% if effective_setup == "1" %}
          roles/create_cfg/templates/wavelite_network_config.ini.j2
          {% else %}
          roles/create_cfg/templates/network_config.ini.j2
          {% endif %}
        dest: "/tmp/network_{{ vm_name }}.ini"
      become: true

    - name: Read network config content
      ansible.builtin.slurp:
        src: "/tmp/network_{{ vm_name }}.ini"
      become: true
      register: network_ini_content

    - name: Set network config fact
      ansible.builtin.set_fact:
        user_data_action_1: "{{ network_ini_content.content | b64decode }}"

    # ------------------------
    # Generate thin pool configuration
    # ------------------------
    - name: Create thin pool config directories
      ansible.builtin.file:
        path: "/usr/local/etc/vm_configs/{{ vm_name }}"
        state: directory
        mode: '0755'
      become: true

    - name: Generate thin pool configuration files (destinations)
      ansible.builtin.template:
        src: "{{ item.vm_type }}_thin_pool_volume.cfg.j2"
        dest: "{{ dest_path }}"
      become: true
      loop:
        - "/usr/local/etc/vm_configs/{{ vm_name }}/{{ item.vm_type }}_thin_pool_volume.cfg"
        - "/usr/local/etc/{{ item.vm_type }}_thin_pool_volume.cfg"
      loop_control:
        loop_var: dest_path

    - name: Read thin pool config content
      ansible.builtin.slurp:
        src: "/usr/local/etc/{{ item.vm_type }}_thin_pool_volume.cfg"
      become: true
      register: thin_pool_cfg_content

    - name: Set thin pool config fact
      ansible.builtin.set_fact:
        user_data_action: "{{ thin_pool_cfg_content.content | b64decode }}"

    # ------------------------
    # Create cloud-init ISO
    # ------------------------
    - name: Ensure cloud-init ISO directory exists
      ansible.builtin.file:
        path: "/cloudinitiso/{{ vm_name }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      become: true

    - name: Generate user-data and meta-data files
      ansible.builtin.template:
        src: "{{ file }}.j2"
        dest: "/cloudinitiso/{{ vm_name }}/{{ file }}"
      become: true
      loop:
        - user-data
        - meta-data
      loop_control:
        loop_var: file

    - name: Generate cloud-init ISO
      ansible.builtin.command:
        cmd: "genisoimage -output {{ vm_name }}_ciiso.iso -volid cidata -joliet -rock user-data meta-data"
        chdir: "/cloudinitiso/{{ vm_name }}"
      become: true

- name: Debug final user-data and thin pool content
  ansible.builtin.debug:
    msg:
      - "Network config: {{ user_data_action_1 }}"
      - "Thin pool config: {{ user_data_action }}"

