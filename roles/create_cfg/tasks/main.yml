---
- block:

    # Ensure VM config directory exists
    - name: Create directory for VM config
      ansible.builtin.file:
        path: "/usr/local/etc/vm_configs/{{ vm_name }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      become: true

    # Set partition size facts
    - name: Set partition sizes
      ansible.builtin.set_fact:
        couchdata: "{{ vm_info.vm_partition.couchdata_size | default(omit) }}"
        couchindex: "{{ vm_info.vm_partition.couchindex_size | default(omit) }}"
        DGdata: "{{ vm_info.vm_partition.DGdata_size | default(omit) }}"
        DGlogs: "{{ vm_info.vm_partition.DGlogs_size | default(omit) }}"
        Database: "{{ vm_info.vm_partition.Database_size | default(omit) }}"
        GridGainData: "{{ vm_info.vm_partition.GridGainData_size | default(omit) }}"
        GridGainDrFs: "{{ vm_info.vm_partition.GridGainDrFs_size | default(omit) }}"
        GridGainWal: "{{ vm_info.vm_partition.GridGainWal_size | default(omit) }}"
        PostgresData: "{{ vm_info.vm_partition.PostgresData_size | default(omit) }}"
        PostgresWal: "{{ vm_info.vm_partition.PostgresWal_size | default(omit) }}"
        Recordings: "{{ vm_info.vm_partition.Recordings_size | default(omit) }}"

    # On-prem or Wavelite network templates
    - name: Create network config
      ansible.builtin.template:
        src: >-
          {{ 'roles/create_cfg/templates/wavelite_network_config.ini.j2'
             if effective_setup == '1'
             else 'roles/create_cfg/templates/network_config.ini.j2' }}
        dest: "/tmp/network_{{ vm_name }}.ini"
      become: true

    - name: Slurp network config content
      ansible.builtin.slurp:
        src: "/tmp/network_{{ vm_name }}.ini"
      become: true
      register: network_file_content

    - name: Decode network config content
      ansible.builtin.set_fact:
        user_data_action_1: "{{ network_file_content.content | b64decode }}"

    # Thin pool config files
    - name: Generate thin pool configuration (per VM)
      ansible.builtin.template:
        src: "{{ vm_info.vm_type }}_thin_pool_volume.cfg.j2"
        dest: "/usr/local/etc/vm_configs/{{ vm_name }}/{{ vm_info.vm_type }}_thin_pool_volume.cfg"
      become: true

    - name: Generate thin pool configuration (common)
      ansible.builtin.template:
        src: "{{ vm_info.vm_type }}_thin_pool_volume.cfg.j2"
        dest: "/usr/local/etc/{{ vm_info.vm_type }}_thin_pool_volume.cfg"
      become: true

    - name: Slurp thin pool config
      ansible.builtin.slurp:
        src: "/usr/local/etc/{{ vm_info.vm_type }}_thin_pool_volume.cfg"
      become: true
      register: thin_pool_content

    - name: Set thin pool config fact
      ansible.builtin.set_fact:
        user_data_action: "{{ thin_pool_content.content | b64decode }}"

    # Cloud-init ISO
    - name: Create directory for ISO
      ansible.builtin.file:
        path: "/cloudinitiso/{{ vm_name }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      become: true

    - name: Generate cloud-init templates
      ansible.builtin.template:
        src: "{{ file }}.j2"
        dest: "/cloudinitiso/{{ vm_name }}/{{ file }}"
      become: true
      loop:
        - user-data
        - meta-data
      loop_control:
        loop_var: file

    - name: Generate cloud-init ISO
      ansible.builtin.command:
        cmd: "genisoimage -output {{ vm_name }}_ciiso.iso -volid cidata -joliet -rock user-data meta-data"
        chdir: "/cloudinitiso/{{ vm_name }}"
      become: true

