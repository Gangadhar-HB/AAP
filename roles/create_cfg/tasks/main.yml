---
- block:
    # TASK 1: Include network info
    - name: Include network details
      ansible.builtin.include_tasks: files/get_networkInfo.yml

    # TASK 2: Ensure VM config directory exists
    - name: Create directory for VM config
      ansible.builtin.file:
        path: "/usr/local/etc/vm_configs/{{ vm_name }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      become: true

    # TASK 3: Set partition sizes
    - name: Set partition size facts for the VM
      ansible.builtin.set_fact:
        couchdata: "{{ item.vm_partition.couchdata_size | default(omit) }}"
        couchindex: "{{ item.vm_partition.couchindex_size | default(omit) }}"
        DGdata: "{{ item.vm_partition.DGdata_size | default(omit) }}"
        DGlogs: "{{ item.vm_partition.DGlogs_size | default(omit) }}"
        Database: "{{ item.vm_partition.Database_size | default(omit) }}"
        GridGainData: "{{ item.vm_partition.GridGainData_size | default(omit) }}"
        GridGainDrFs: "{{ item.vm_partition.GridGainDrFs_size | default(omit) }}"
        GridGainWal: "{{ item.vm_partition.GridGainWal_size | default(omit) }}"
        PostgresData: "{{ item.vm_partition.PostgresData_size | default(omit) }}"
        PostgresWal: "{{ item.vm_partition.PostgresWal_size | default(omit) }}"
        Recordings: "{{ item.vm_partition.Recordings_size | default(omit) }}"

    # TASK 4: Set vm_info fact (for cloud-init)
    - name: Set vm_info fact for cloud-init template
      ansible.builtin.set_fact:
        vm_info:
          name: "{{ vm_name }}"
          type: "{{ item.vm_type }}"
          hostname: "{{ vm_name }}"
          timezone: "{{ timezone | default('UTC') }}"
          networkInterface: "{{ item.networkInterface }}"

    # TASK 5: Generate network config file (On-prem)
    - block:
        - name: Create On-prem network config
          ansible.builtin.template:
            src: "roles/create_cfg/templates/network_config.ini.j2"
            dest: "/tmp/network_{{ vm_name }}.ini"
          become: true

        - name: Slurp On-prem network config content
          ansible.builtin.slurp:
            src: "/tmp/network_{{ vm_name }}.ini"
          register: user_data_action_1_onprem_slurp
          become: true

        - name: Set network config fact
          ansible.builtin.set_fact:
            user_data_action_1: "{{ user_data_action_1_onprem_slurp.content | b64decode }}"
      when: effective_setup == "0"

    # TASK 6: Generate network config file (Wavelite)
    - block:
        - name: Create Wavelite network config
          ansible.builtin.template:
            src: "roles/create_cfg/templates/wavelite_network_config.ini.j2"
            dest: "/tmp/wavelite_network_{{ vm_name }}.ini"
          become: true

        - name: Slurp Wavelite network config content
          ansible.builtin.slurp:
            src: "/tmp/wavelite_network_{{ vm_name }}.ini"
          register: user_data_action_1_wavelite_slurp
          become: true

        - name: Set network config fact
          ansible.builtin.set_fact:
            user_data_action_1: "{{ user_data_action_1_wavelite_slurp.content | b64decode }}"
      when: effective_setup == "1"

    # TASK 7: Generate thin pool config files
    - name: Generate thin pool configuration (VM-specific)
      ansible.builtin.template:
        src: "{{ item.vm_type }}_thin_pool_volume.cfg.j2"
        dest: "/usr/local/etc/vm_configs/{{ vm_name }}/{{ item.vm_type }}_thin_pool_volume.cfg"
      become: true

    - name: Generate thin pool configuration (global)
      ansible.builtin.template:
        src: "{{ item.vm_type }}_thin_pool_volume.cfg.j2"
        dest: "/usr/local/etc/{{ item.vm_type }}_thin_pool_volume.cfg"
      become: true

    - name: Slurp thin pool config
      ansible.builtin.slurp:
        src: "/usr/local/etc/{{ item.vm_type }}_thin_pool_volume.cfg"
      register: user_data_action_slurp
      become: true

    - name: Set thin pool config fact
      ansible.builtin.set_fact:
        user_data_action: "{{ user_data_action_slurp.content | b64decode }}"

    # TASK 8: Create ISO directory
    - name: Create cloud-init ISO directory
      ansible.builtin.file:
        path: "/cloudinitiso/{{ vm_name }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      become: true

    # TASK 9: Generate cloud-init user-data and meta-data
    - name: Generate cloud-init user-data and meta-data
      ansible.builtin.template:
        src: "{{ file }}.j2"
        dest: "/cloudinitiso/{{ vm_name }}/{{ file }}"
      loop:
        - user-data
        - meta-data
      loop_control:
        loop_var: file
      become: true

    # TASK 10: Create cloud-init ISO
    - name: Create cloud-init ISO image
      ansible.builtin.command:
        cmd: "genisoimage -output {{ vm_name }}_ciiso.iso -volid cidata -joliet -rock user-data meta-data"
        chdir: "/cloudinitiso/{{ vm_name }}"
      become: true

