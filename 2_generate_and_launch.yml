# 2_generate_and_launch.yml
---
- hosts: localhost
  gather_facts: no
  vars:
    # This list will be passed in from the previous workflow step
    vms_to_create: []

  tasks:
    - name: Generate configurations and launch VMs
      block:
        # Task 1: Generate CFG and INI Files using roles
        - name: Include create_cfg role
          ansible.builtin.include_role:
            name: create_cfg
          vars:
            vm_name: "{{ item.name }}"
            vm_type: "{{ item.vm_type }}"
            # Pass all item variables to the role
            item: "{{ item }}"

        - name: Include create_ini role
          ansible.builtin.include_role:
            name: create_ini
          vars:
            vm_name: "{{ item.name }}"
            vm_type: "{{ item.vm_type }}"
            item: "{{ item }}"

        # Task 2: Launch the VM (async)
        - name: Include create_vm role
          ansible.builtin.include_role:
            name: create_vm
          vars:
            vm_name: "{{ item.name }}"
            vm_type: "{{ item.vm_type }}"
            item: "{{ item }}"
          async: 1800 # 30 minutes timeout
          poll: 0 # Fire and forget
          register: launch_job

        - name: Store successful launch job ID
          ansible.builtin.set_fact:
            successful_vms: "{{ successful_vms | default([]) + [{'name': item.name, 'job_id': launch_job.ansible_job_id, 'hostip': item.hostip, 'vm_vars': item }] }}"

      # This block loops over the list of VMs passed from the pre-flight check
      loop: "{{ vms_to_create }}"
      loop_control:
        loop_var: item
      delegate_to: "{{ item.hostip }}"

    # CRITICAL: Pass the list of launched VMs and their job IDs to the next step
    - name: Set workflow facts for launched VMs
      ansible.builtin.set_stats:
        data:
          launched_vms: "{{ successful_vms | default([]) }}"
